#include <iostream>
#include <algorithm>
#include <fstream>
using namespace std;

// Heapify function
void HeapifyIt(int arr[], int n, int i, int &count)
{

    int largest = i;

    int l = i * 2 + 1;   // left child
    int r = (i * 2) + 2; // right child

    if (l < n && (count += 1) && (arr[l] > arr[largest]))
    {
        largest = l;
    }

    if (r < n && (count += 1) && (arr[r] > arr[largest]))
    {
        largest = r;
    }

    if (largest != i) // if largest is not the same
    {

        swap(arr[i], arr[largest]); // Inbuilt swap func

        HeapifyIt(arr, n, largest, count); // call again for smaller tree
    }
}

// heap sort func
int Heap_Sort(int arr[], int n, int &comp)
{

    /**************************************************************
     n= length of arra
     i=n/2-1, because it is starting of internal node of tree
     ***************************************************************/

    // For building heap
    for (int i = n / 2 - 1; i >= 0; i--)
    {
        HeapifyIt(arr, n, i, comp);
    }

    // for deletion from heap
    for (int i = n - 1; i >= 0; i--)
    {
        swap(arr[i], arr[0]);       // swaping every time current first element of heap with current last element of heap
        HeapifyIt(arr, i, 0, comp); // calling heapify to rearranges a heap in order to maintain its property
    }

    return comp; // Returning no of comparisions
}

// For generating Random array

void generate_random_array(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        arr[i] = (rand() % 100);
    }
}

// Average Case

void Heap_avg_case(int num_cases = 100, int min_size = 30, int max_size = 1000)
{
    int interval = (max_size - min_size) / num_cases;
    int comp = 0;
    for (int size = min_size, i = 0; i < num_cases; i++, size += interval)
    {
        int *Arr = new int[size];
        generate_random_array(Arr, size);

        fstream fout1;

        Heap_Sort(Arr, size, comp);

        cout << size << "," << comp << endl;
        // fout1.open("HeapAverage.csv", ios::out | ios::app);
        // fout1 << size << "," << comp << endl;
        comp = 0;
    }
}

// Best Case
void Heap_best_case(int num_cases = 20, int min_size = 30, int max_size = 1000)
{
    int interval = (max_size - min_size) / num_cases;
    int comp = 0;
    for (int size = min_size, i = 0; i < num_cases; i++, size += interval)
    {
        int *Arr = new int[size];
        generate_random_array(Arr, size);
        sort(Arr, Arr + size, greater<int>());
        fstream fout1;

        Heap_Sort(Arr, size, comp);

        cout << size << "," << comp << endl;
        // fout1.open("HeapSortBest.csv", ios::out | ios::app);
        // fout1 << size << "," << comp << endl;
        comp = 0;
    }
}

// Worst Case
void Heap_Worst_case(int num_cases = 20, int min_size = 30, int max_size = 1000)
{
    int interval = (max_size - min_size) / num_cases;
    int comp = 0;
    for (int size = min_size, i = 0; i < num_cases; i++, size += interval)
    {
        int *Arr = new int[size];
        generate_random_array(Arr, size);
        sort(Arr, Arr + size);
        fstream fout1;

        Heap_Sort(Arr, size, comp);

        cout << size << "," << comp << endl;
        // fout1.open("HeapSortWorst.csv", ios::out | ios::app);
        // fout1 << size << "," << comp << endl;
        comp = 0;
    }
}

int main()
{
    cout << "\nAverage Case:\n";
    Heap_avg_case();
    cout << "\nBest Case:\n";
    Heap_best_case();
    cout << "\nWorst Case:\n";
    Heap_Worst_case();

    return 0;
}